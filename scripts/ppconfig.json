{"name":"YouTuan","url":"https://account.fuhaogou.com","showName":"店长助手","appid":"com.yo1utuan.app","icon":"","iconRound":true,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":true,"version":"1.0.1","preview":"Android","platform":["1-1","1-2","2-1","2-2"],"width":412,"height":915,"desc":"","jsFile":[],"filterCss":"","customJs":"console.log(\n    '%cbuild from PakePlus： https://github.com/Sjj1024/PakePlus',\n    'color:orangered;font-weight:bolder'\n)\n\n// 全局标记：CSS是否加载成功（控制后续JS功能范围）\nlet isCssLoadedSuccess = false;\n\n// 1. 加载外部CSS的函数（核心：成功后标记状态，不加载JS；失败重试后才用备用JS）\nfunction loadExternalCss(url, fallbackJsUrl) {\n    // 先检查CSS是否已加载\n    const existingLink = document.querySelector(`link[href=\"${url}\"]`);\n    if (existingLink) {\n        console.log(`外部CSS已存在，无需加载: ${url}`);\n        isCssLoadedSuccess = true;\n        console.log('CSS已加载，不加载备用JS，仅初始化事件响应');\n        initLoginEventOnly(); // 只启动事件响应\n        return;\n    }\n\n    const link = document.createElement('link');\n    link.href = url;\n    link.rel = 'stylesheet';\n    link.type = 'text/css';\n\n    // 确保在DOM准备好后再加载CSS\n    const loadWhenReady = () => {\n        if (document.readyState === 'complete' || document.readyState === 'interactive') {\n            document.head.appendChild(link);\n        } else {\n            setTimeout(loadWhenReady, 100);\n        }\n    };\n\n    // CSS加载成功 - 标记状态，只初始化事件，不加载JS\n    link.onload = function() {\n        console.log(`外部CSS加载成功: ${url}`);\n        isCssLoadedSuccess = true;\n        console.log('CSS加载成功，不加载备用JS，仅初始化事件响应');\n        initLoginEventOnly(); // 仅启动登录事件修复，无样式操作\n    };\n\n    // CSS加载失败 - 重试，多次失败后加载备用JS（备用JS也只处理事件）\n    link.onerror = function() {\n        console.error(`外部CSS加载失败: ${url}`);\n        retryLoadCss(url, fallbackJsUrl, 5, 2000);\n    };\n\n    loadWhenReady();\n}\n\n// 2. 加载外部JS的函数（仅CSS失败时使用，且JS仅处理事件，不包含样式）\nfunction loadExternalScript(url) {\n    // 先检查脚本是否已加载\n    const existingScript = document.querySelector(`script[src=\"${url}\"]`);\n    if (existingScript) {\n        console.log(`备用JS已加载: ${url}`);\n        initLoginEventOnly(); // 即使JS已存在，也只启动事件功能\n        return;\n    }\n\n    const script = document.createElement('script');\n    script.src = url;\n    script.type = 'text/javascript';\n    script.async = false;\n    script.defer = false;\n\n    const executeWhenReady = () => {\n        if (document.readyState === 'complete' || document.readyState === 'interactive') {\n            document.head.appendChild(script);\n        } else {\n            setTimeout(executeWhenReady, 100);\n        }\n    };\n\n    // JS加载成功后：仅初始化事件，屏蔽原JS中的样式相关函数\n    script.onload = function() {\n        console.log(`备用JS加载成功: ${url}`);\n        console.log('备用JS仅启用事件响应，屏蔽样式操作');\n        \n        // 1. 屏蔽原JS中可能的样式函数（避免干扰CSS）\n        if (typeof window.hideElements === 'function') {\n            // 重写hideElements，只执行事件相关逻辑，移除样式操作\n            const originalHideElements = window.hideElements;\n            window.hideElements = function() {\n                try {\n                    // 执行原函数但过滤样式代码（或直接调用事件初始化）\n                    console.log('屏蔽hideElements中的样式操作，仅保留事件逻辑');\n                    initLoginEventOnly(); // 优先用统一的事件初始化\n                } catch (e) {\n                    console.error('重写hideElements执行出错:', e);\n                }\n            };\n            console.log('已重写hideElements，仅保留事件功能');\n        } else {\n            // 若没有hideElements，直接初始化事件\n            initLoginEventOnly();\n        }\n    };\n\n    // JS加载失败 - 重试\n    script.onerror = function() {\n        console.error(`备用JS加载失败: ${url}`);\n        retryLoadJs(url, 3, 2000);\n    };\n\n    executeWhenReady();\n}\n\n// 3. 核心：仅初始化登录事件响应（无任何样式操作，确保不干扰CSS）\nfunction initLoginEventOnly() {\n    console.log('开始初始化登录事件响应（无样式操作）');\n\n    // 等待DOM和CSS完全渲染（确保登录按钮已存在）\n    const waitForLoginBtn = () => {\n        const loginBtn = document.querySelector('.style-login-botton.ivu-btn[data-v-2f9eb9a7]');\n        if (!loginBtn) {\n            console.log('未找到登录按钮，1秒后重试');\n            setTimeout(waitForLoginBtn, 1000);\n            return;\n        }\n\n        // 移除旧事件（避免重复绑定）\n        loginBtn.removeEventListener('click', handleLoginClick);\n\n        // 绑定新的事件处理（适配Vue/表单/原生三种场景）\n        function handleLoginClick(e) {\n            // 场景1：Vue框架（通过__vue__实例获取原始登录方法）\n            if (loginBtn.__vue__) {\n                const vueInstance = loginBtn.__vue__;\n                const commonLoginMethods = ['handleLogin', 'submitLogin', 'onLogin', 'login'];\n                \n                for (const method of commonLoginMethods) {\n                    if (typeof vueInstance[method] === 'function') {\n                        vueInstance[method]();\n                        console.log(`登录事件：通过Vue方法[${method}]触发`);\n                        return;\n                    }\n                }\n            }\n\n            // 场景2：原生表单（触发form提交事件）\n            const loginForm = loginBtn.closest('form.ivu-form');\n            if (loginForm) {\n                e.preventDefault(); // 阻止默认行为，避免冲突\n                const submitEvent = new Event('submit', { bubbles: true, cancelable: true });\n                loginForm.dispatchEvent(submitEvent);\n                console.log(`登录事件：通过表单submit触发`);\n                return;\n            }\n\n            // 场景3：原生点击（最后兜底，模拟原始点击）\n            const nativeClickEvent = new MouseEvent('click', {\n                bubbles: true,\n                cancelable: true,\n                view: window\n            });\n            loginBtn.dispatchEvent(nativeClickEvent);\n            console.log(`登录事件：通过原生点击事件触发`);\n        }\n\n        loginBtn.addEventListener('click', handleLoginClick);\n        console.log('登录事件响应初始化完成（无样式干扰）');\n    };\n\n    waitForLoginBtn();\n}\n\n// 4. CSS重试加载函数（多次失败后才加载备用JS）\nfunction retryLoadCss(cssUrl, jsUrl, maxRetries, delay) {\n    let retries = 0;\n    \n    const attemptLoad = () => {\n        retries++;\n        if (retries <= maxRetries) {\n            console.log(`CSS第${retries}次重试加载: ${cssUrl}`);\n            setTimeout(() => loadExternalCss(cssUrl, jsUrl), delay);\n        } else {\n            console.error(`CSS达到最大重试次数(${maxRetries})，尝试加载备用JS（仅事件功能）`);\n            loadExternalScript(jsUrl); // 仅加载JS的事件部分\n        }\n    };\n    \n    attemptLoad();\n}\n\n// 5. JS重试加载函数\nfunction retryLoadJs(url, maxRetries, delay) {\n    let retries = 0;\n    \n    const attemptLoad = () => {\n        retries++;\n        if (retries <= maxRetries) {\n            console.log(`备用JS第${retries}次重试加载: ${url}`);\n            setTimeout(() => loadExternalScript(url), delay);\n        } else {\n            console.error(`备用JS达到最大重试次数(${maxRetries})，尝试直接初始化事件`);\n            initLoginEventOnly(); // 最后兜底：直接初始化事件\n        }\n    };\n    \n    attemptLoad();\n}\n\n// 6. 原有chunk加载失败处理（保持不变）\nwindow.addEventListener('error', function(e) {\n    if (e.target.tagName === 'SCRIPT') {\n        const url = e.target.src;\n        if (url.includes('chunk')) {\n            console.error(`Chunk加载失败: ${url}`);\n            retryLoadJs(url, 3, 3000);\n        }\n    }\n}, true);\n\n// 7. 原有核心点击事件处理（保持不变，不干扰登录事件）\nconst hookClick = (e) => {\n    const origin = e.target.closest('a')\n    const isBaseTargetBlank = document.querySelector(\n        'head base[target=\"_blank\"]'\n    )\n    console.log('origin', origin, isBaseTargetBlank)\n    if (\n        (origin && origin.href && origin.target === '_blank') ||\n        (origin && origin.href && isBaseTargetBlank)\n    ) {\n        e.preventDefault()\n        console.log('handle origin', origin)\n        location.href = origin.href\n    } else {\n        console.log('not handle origin', origin)\n    }\n}\n\nwindow.open = function (url, target, features) {\n    console.log('open', url, target, features)\n    location.href = url\n}\n\ndocument.addEventListener('click', hookClick, { capture: true })\n\n// 8. 启动入口：加载CSS，指定备用JS（逻辑不变，后续功能由isCssLoadedSuccess控制）\nloadExternalCss(\n    'https://server.kexuny.cn/work/midd.css', \n    'https://server.kexuny.cn//work/midd.js'\n);","isHtml":false,"htmlPath":"","htmlFiles":[],"more":{"windows":{"label":"","title":"店长助手","url":"https://account.fuhaogou.com","userAgent":"Mozilla/5.0 (Linux; Android 14; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Mobile Safari/537.36","width":412,"height":915,"theme":null,"resizable":true,"fullscreen":false,"maximized":false,"minWidth":400,"minHeight":300,"maxWidth":1920,"maxHeight":1080,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":false,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]},"webview":{"userAgent":"","javaScriptEnabled":true,"domStorageEnabled":true,"allowFileAccess":true,"loadWithOverviewMode":true,"setSupportZoom":true,"clearCache":true}},"ios":{"name":"YouTuan","showName":"店长助手","version":"1.0.1","webUrl":"https://account.fuhaogou.com","id":"com.yo1utuan.app.ios","icon":"./app-icon.png","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false},"android":{"name":"YouTuan","showName":"店长助手","version":"1.0.1","webUrl":"https://account.fuhaogou.com","id":"com.yo1utuan.app.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":false},"desktop":{"name":"YouTuan","showName":"店长助手","version":"1.0.1","id":"com.yo1utuan.app.desktop","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途，否则后果自负）","webUrl":"https://account.fuhaogou.com","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途，否则后果自负）","isHtml":false,"single":true,"state":true,"injectJq":false,"tauriApi":false,"buildMethod":"cloud","debug":false}}